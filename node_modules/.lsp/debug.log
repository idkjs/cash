Hello - from /Users/mandalarian/.vscode/extensions/jaredly.reason-vscode-1.7.8/bin.native
Previous log location: /var/folders/rt/7lc5vcw16459dszl8djk35fh0000gn/T/lsp.log
Sending notification {"jsonrpc": "2.0", "method": "client/registerCapability", "params": {"registrations": [{"id": "watching", "method": "workspace/didChangeWatchedFiles", "registerOptions": {"watchers": [{"globPattern": "**/bsconfig.json"}, {"globPattern": "**/.merlin"}]}}]}}
Sending response {"id": 0, "jsonrpc": "2.0", "result": {"capabilities": {"textDocumentSync": 1, "hoverProvider": true, "completionProvider": {"resolveProvider": true, "triggerCharacters": ["."]}, "signatureHelpProvider": {"triggerCharacters": ["("]}, "definitionProvider": true, "typeDefinitionProvider": true, "referencesProvider": true, "documentSymbolProvider": true, "codeActionProvider": true, "executeCommandProvider": {"commands": ["reason-language-server.add_to_interface_inner"]}, "codeLensProvider": {"resolveProvider": true}, "documentHighlightProvider": true, "documentRangeFormattingProvider": true, "documentFormattingProvider": true, "renameProvider": true}}}
Read message 
{"jsonrpc":"2.0","method":"initialized","params":{}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"reason_language_server":{"location":"","build_system_override_by_root":{},"refmt":"","lispRefmt":"","mlfmt":"","format_width":80,"per_value_codelens":true,"dependencies_codelens":true,"opens_codelens":true,"show_module_path_on_hover":true,"reloadOnChange":false,"show_debug_errors":false,"autoRebuild":true}}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/mandalarian/Downloads/cash/main.ml","languageId":"ocaml","version":1,"text":"open Syntax\nopen Utils\nopen Unix\nopen ExtUnixSpecific\n\nexception MainError of string\nexception NotReached\nexception Invalid_argument\nexception InvalidCommand\n\nlet histfilename = \".cash_history\"\nlet prompt = \"$ \"\nlet env = ref [||]\n\n\nlet to_background (j : job) (jbs : job list) =\n  tcsetpgrp stdin (getpgid 0);\n  print_job_status j ((List.length jbs) + 1);\n  flush Pervasives.stdout;\n  jbs @ [j]\n\n\nlet wait_foreground_job (j : job) (jbs : job list) =\n  let status = List.hd (List.map (fun p -> waitpid [WUNTRACED] p.pid) j.procs) in\n  tcsetpgrp stdin (getpid ());\n  match status with\n  | (_, WSTOPPED n) ->\n    j.status <- Stopped;\n    to_background j jbs\n  | _ -> []\n\n\nlet wait_background_job (jbs : job list) =\n  let rec handle_terminated_proc (pid : int) (jbs : job list) =\n    let has_pid j = List.exists (fun p -> p.pid = pid) j.procs in\n    let j = List.find has_pid jbs in\n    j.nalive <- j.nalive - 1;\n    match (j.nalive > 0) with\n    | false -> remove j jbs\n    | true -> jbs\n  in\n  (try\n     let (pid, status) = waitpid [WNOHANG; WUNTRACED] (-1) in\n     match pid with\n     | 0 -> jbs\n     | _ -> handle_terminated_proc pid jbs\n   with\n   | Not_found -> jbs\n   | Unix_error (ECHILD, _, _) -> jbs)\n\n\nlet exec_history () =\n  let channel = open_in histfilename in\n  let rec _read_hist_print (n : int) =\n    (try\n       let str = input_line channel in\n       Printf.printf \"%s : %s\\n\" (string_of_int n) str;\n       _read_hist_print (n + 1)\n     with\n     | End_of_file -> ())\n  in _read_hist_print 0; flush Pervasives.stdout;\n  sys_exit 0\n\n\nlet exec_cd (arg : string array) =\n  (match Array.length arg with\n   | 1 -> chdir (getenv \"HOME\")\n   | _ -> (try chdir arg.(1) with\n       | Unix_error (eno, _, x) -> raise (MainError (errmsg eno \"cd\" x))));\n  sys_exit 0\n\n\nlet exec_fg (args : string array) (jbs : job list) =\n  (try\n     let index = match Array.length args with\n       | 1 -> 1\n       | _ -> int_of_string args.(1)\n     in\n     let j = List.nth jbs (index - 1) in\n     let newjbs = remove j jbs in\n     (match j.status with\n      | Stopped ->\n        j.status <- Running;\n        List.iter (fun p -> kill p.pid Sys.sigcont) j.procs\n      | _ -> ());\n     j.mode <- Foreground;\n     tcsetpgrp stdin j.pgid;\n     print_job_status j index; flush Pervasives.stdout;\n     wait_foreground_job j newjbs\n   with\n   | Failure _ -> raise (MainError \"No such job\")\n   | Invalid_argument -> raise (MainError \"No such job\"))\n\n\nlet exec_bg (args : string array) (jbs : job list) =\n  (try\n     let index = match Array.length args with\n       | 1 -> 1\n       | _ -> int_of_string args.(1)\n     in\n     let j = List.nth jbs (index - 1) in\n     (match j.status with\n      | Stopped ->\n        j.status <- Running;\n        List.iter (fun p -> kill p.pid Sys.sigcont) j.procs\n      | _ -> ());\n     print_job_status j index; flush Pervasives.stdout;\n     jbs\n   with\n   | Failure _ -> raise (MainError \"No such job\")\n   | Invalid_argument -> raise (MainError \"No such job\"))\n\n\nlet exec_jobs (jbs : job list) =\n  let id = ref 0 in\n  let _print j = id := !id + 1; print_job_status j !id;\n  in\n  List.iter _print jbs;\n  flush Pervasives.stdout;\n  sys_exit 0\n\n\nlet run_job (j : job) (jbs : job list) =\n  let nproc = List.length j.procs in\n  let pipes = List.map (fun _ -> pipe ()) (List.tl j.procs) in\n  let _close_pipe_all (p : pipe list) =\n    List.iter (fun (pin, pout) -> close pin; close pout) p\n  in\n  let rec _run_job (pl : proc list) (n : int) (cpid : int list) (pgid : int) =\n    match pl with\n    | [] ->\n      j.pgid <- pgid;\n      sleepf 0.001; (* for setpgid to be effective *)\n      _close_pipe_all pipes;\n      (match j.mode with\n       | Foreground ->\n         (match pgid with\n          | 0 -> jbs\n          | _ -> tcsetpgrp stdin pgid; wait_foreground_job j jbs)\n       | Background ->\n         to_background j jbs)\n    | p :: px ->\n      (match fork () with\n       | 0 ->\n         setup_pipes pipes n nproc;\n         setup_redirect p;\n         set_signals Sys.Signal_default;\n         setpgid 0 pgid;\n         (try\n            match p.command with\n            | \"history\" -> exec_history ()\n            | \"cd\"      -> exec_cd p.args\n            | \"jobs\"    -> exec_jobs jbs\n            | _         -> execvpe p.command p.args !env\n          with\n          | Unix_error (ENOENT, \"execvpe\", cmd) ->\n            prerr_string (\"command not found: \" ^ cmd ^ \"\\n\");\n            flush Pervasives.stderr;\n            kill 0 Sys.sigkill;\n            raise InvalidCommand)\n       | pid ->\n         p.pid <- pid;\n         match pgid with\n         | 0 -> _run_job px (n + 1) (pid :: cpid) pid\n         | _ -> _run_job px (n + 1) (pid :: cpid) pgid)\n  in\n  (try _run_job j.procs 0 [] 0 with\n   | Unix_error (eno, syscall, cmd) -> raise (MainError (errmsg eno syscall cmd)))\n\n\nlet rec read_exec (ojbs : job list) =\n  let jbs = wait_background_job ojbs in\n  match LNoise.linenoise prompt with\n  | None -> () (* terminating the shell *)\n  | Some \"\" -> read_exec jbs\n  | Some input ->\n    (LNoise.history_add input |> ignore;\n     LNoise.history_save histfilename |> ignore;\n     (try\n        let job_i = Parser.toplevel Lexer.main (Lexing.from_string input) in\n        let job = Syntax.job_i_to_job job_i in\n        job.command <- input;\n        match job.procs with\n        | [] -> raise NotReached\n        | p :: px -> (match p.command with\n            | \"exit\" -> ()\n            | \"fg\"   -> let newjbs = exec_fg p.args jbs in read_exec newjbs\n            | \"bg\"   -> let newjbs = exec_bg p.args jbs in read_exec newjbs\n            | _      -> let newjbs = run_job job jbs in read_exec newjbs)\n      with\n      | Parsing.Parse_error ->\n        prerr_string \"Invalid input.\\n\"; flush Pervasives.stderr; read_exec jbs\n      | MainError msg ->\n        prerr_string (msg ^ \"\\n\"); flush Pervasives.stderr; read_exec jbs\n      | InvalidCommand -> read_exec jbs\n      | End_of_file -> ()))\n\n\nlet rec read_print () =\n  print_string \"$ \";\n  flush Pervasives.stdout;\n  let input = read_line () in\n  let job_i = Parser.toplevel Lexer.main (Lexing.from_string input) in\n  let job = Syntax.job_i_to_job job_i in\n  (print_job job;\n   read_print ())\n\n\nlet _ =\n  openfile histfilename [O_RDWR; O_APPEND; O_CREAT] 0o600 |> ignore;\n  LNoise.set_multiline true;\n  LNoise.history_load ~filename:histfilename |> ignore;\n  LNoise.history_set ~max_length:100 |> ignore;\n  set_signals Sys.Signal_ignore;\n  env := environment (); read_exec []\n\n(*\nlet _ =\n  read_print ()\n*)\n\n"}}}
Found a `.merlin` file at /Users/mandalarian/Downloads/cash
]] Making a new jbuilder package at /Users/mandalarian/Downloads/cash
=== Project root: /Users/mandalarian/Downloads/cash
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /Users/mandalarian/Downloads/cash/jbuild"}}
Read message 
{"jsonrpc":"2.0","id":1,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/mandalarian/Downloads/cash/main.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00619888305664ms
Found a `.merlin` file at /Users/mandalarian/Downloads/cash
]] Making a new jbuilder package at /Users/mandalarian/Downloads/cash
=== Project root: /Users/mandalarian/Downloads/cash
Detected `opam` dependency manager for local use
Sending response {"id": 1, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/mandalarian/Downloads/cash/jbuild"}}
Read message 
{"jsonrpc":"2.0","id":2,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/mandalarian/Downloads/cash/main.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Found a `.merlin` file at /Users/mandalarian/Downloads/cash
]] Making a new jbuilder package at /Users/mandalarian/Downloads/cash
=== Project root: /Users/mandalarian/Downloads/cash
Detected `opam` dependency manager for local use
Sending response {"id": 2, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/mandalarian/Downloads/cash/jbuild"}}
Read message 
{"jsonrpc":"2.0","id":3,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/mandalarian/Downloads/cash/main.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /Users/mandalarian/Downloads/cash
]] Making a new jbuilder package at /Users/mandalarian/Downloads/cash
=== Project root: /Users/mandalarian/Downloads/cash
Detected `opam` dependency manager for local use
Sending response {"id": 3, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to read /Users/mandalarian/Downloads/cash/jbuild", "command": ""}}]}
Found a `.merlin` file at /Users/mandalarian/Downloads/cash
]] Making a new jbuilder package at /Users/mandalarian/Downloads/cash
=== Project root: /Users/mandalarian/Downloads/cash
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":4,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/mandalarian/Downloads/cash/main.ml"},"position":{"line":7,"character":5}}}
[server] Got a method textDocument/hover
[server] processing took 0.0121593475342ms
Found a `.merlin` file at /Users/mandalarian/Downloads/cash
]] Making a new jbuilder package at /Users/mandalarian/Downloads/cash
=== Project root: /Users/mandalarian/Downloads/cash
Detected `opam` dependency manager for local use
Sending response {"id": 4, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/mandalarian/Downloads/cash/jbuild"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/mandalarian/Downloads/cash/main.ml"}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/mandalarian/Downloads/cash/utils.ml","languageId":"ocaml","version":1,"text":"open Syntax\nopen Unix\n\ntype pipe = (file_descr * file_descr)\n\nlet print_job_status (j : job) (i : int) =\n  match j.status with\n  | Running    -> Printf.printf \"[%d] (pid: %d) Running   : %s\\n\" i j.pgid j.command\n  | Stopped    -> Printf.printf \"[%d] (pid: %d) Stopped   : %s\\n\" i j.pgid j.command\n  | Terminated -> Printf.printf \"[%d] (pid: %d) Terminated: %s\\n\" i j.pgid j.command\n\n\nlet fprint_job_status (j : job) (i : int) (fd : out_channel) =\n  match j.status with\n  | Running    ->\n    Printf.fprintf fd \"[%d] (pid: %d) Running   : %s\\n\" i j.pgid j.command\n  | Stopped    ->\n    Printf.fprintf fd \"[%d] (pid: %d) Stopped   : %s\\n\" i j.pgid j.command\n  | Terminated ->\n    Printf.fprintf fd \"[%d] (pid: %d) Terminated: %s\\n\" i j.pgid j.command\n\n\nlet errmsg eno f arg =\n  Printf.sprintf \"%s: %s: %s\" (error_message eno) f arg\n\n\nlet set_signals (s : Sys.signal_behavior) =\n  Sys.set_signal Sys.sigint  s;\n  Sys.set_signal Sys.sigtstp s;\n  Sys.set_signal Sys.sigttou s;\n  Sys.set_signal Sys.sigttin s;\n  Sys.set_signal Sys.sigquit s\n\n\nlet rec setup_pipes (p : pipe list) (procid : int) (nproc : int) =\n  match p with\n  | [] -> ()\n  | (pin, pout) :: px ->\n    let pipeid = nproc - 1 - List.length p in\n    (match procid - pipeid with\n     | 1 -> close pout; dup2 pin stdin; close pin\n     | 0 -> close pin; dup2 pout stdout; close pout\n     | _ -> close pin; close pout);\n    setup_pipes px procid nproc\n\n\nlet setup_pipes_nodup (p : pipe list) (procid : int) (nproc : int) =\n  let rec _inner (p : pipe list) fdin fdout =\n    match p with\n    | [] -> (fdin, fdout)\n    | (pin, pout) :: px ->\n      let pipeid = nproc - 1 - List.length p in\n      (match procid - pipeid with\n       | 1 -> close pout; _inner px (Some pin) fdout\n       | 0 -> close pin; _inner px fdin (Some pout)\n       | _ -> close pin; close pout; _inner px fdin fdout)\n  in _inner p None None\n\n\nlet setup_redirect (p : proc) =\n  (match p.in_file with\n   | Some filename ->\n     let fd = openfile filename [O_RDONLY] 0o644 in\n     dup2 fd stdin; close fd\n   | None -> ());\n  (match p.out_file with\n   | Some (filename, TRUNC) ->\n     let fd = openfile filename [O_WRONLY; O_CREAT; O_TRUNC] 0o644 in\n     dup2 fd stdout; close fd\n   | Some (filename, APPEND) ->\n     let fd = openfile filename [O_WRONLY; O_CREAT; O_APPEND] 0o644 in\n     dup2 fd stdout; close fd\n   | None -> ())\n\n\nlet rec remove (a : 'a) (l : 'a list) =\n  match l with\n  | [] -> []\n  | x :: xl -> match (a = x) with\n    | true -> xl\n    | false -> x :: (remove a xl)\n\n"}}}
Found a `.merlin` file at /Users/mandalarian/Downloads/cash
]] Making a new jbuilder package at /Users/mandalarian/Downloads/cash
=== Project root: /Users/mandalarian/Downloads/cash
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /Users/mandalarian/Downloads/cash/jbuild"}}
Read message 
{"jsonrpc":"2.0","id":5,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/mandalarian/Downloads/cash/utils.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00715255737305ms
Found a `.merlin` file at /Users/mandalarian/Downloads/cash
]] Making a new jbuilder package at /Users/mandalarian/Downloads/cash
=== Project root: /Users/mandalarian/Downloads/cash
Detected `opam` dependency manager for local use
Sending response {"id": 5, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/mandalarian/Downloads/cash/jbuild"}}
Read message 
{"jsonrpc":"2.0","id":6,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/mandalarian/Downloads/cash/utils.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Found a `.merlin` file at /Users/mandalarian/Downloads/cash
]] Making a new jbuilder package at /Users/mandalarian/Downloads/cash
=== Project root: /Users/mandalarian/Downloads/cash
Detected `opam` dependency manager for local use
Sending response {"id": 6, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/mandalarian/Downloads/cash/jbuild"}}
Read message 
{"jsonrpc":"2.0","id":7,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/mandalarian/Downloads/cash/utils.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.108003616333ms
Found a `.merlin` file at /Users/mandalarian/Downloads/cash
]] Making a new jbuilder package at /Users/mandalarian/Downloads/cash
=== Project root: /Users/mandalarian/Downloads/cash
Detected `opam` dependency manager for local use
Sending response {"id": 7, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to read /Users/mandalarian/Downloads/cash/jbuild", "command": ""}}]}
Found a `.merlin` file at /Users/mandalarian/Downloads/cash
]] Making a new jbuilder package at /Users/mandalarian/Downloads/cash
=== Project root: /Users/mandalarian/Downloads/cash
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/mandalarian/Downloads/cash/utils.ml"}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/mandalarian/Downloads/cash/syntax.ml","languageId":"ocaml","version":1,"text":"type write_opt = TRUNC | APPEND\ntype job_status = Running | Stopped | Terminated\ntype job_mode   = Foreground | Background\n\ntype proc = {\n  mutable pid : int;\n  command     : string;\n  args        : string array;\n  in_file     : string option;\n  out_file    : (string * write_opt) option\n}\n\ntype job = {\n  procs           : proc list;\n  mutable status  : job_status;\n  mutable mode    : job_mode;\n  mutable pgid    : int;\n  mutable command : string;\n  mutable nalive  : int;       (* number of processes that haven't terminated *)\n}\n\n(* (command * args) * (in_file * (out_file * out_option)) *)\ntype proc_i = (string * string list) *\n              (string option * ((string * write_opt) option))\ntype job_i = (proc_i list * job_mode)\n\nlet proc_i_to_proc (p : proc_i) : proc =\n  let ((cmd, args), (in_f, out_f)) = p in\n  (* include the command string to the args_a *)\n  let args_a = Array.of_list (cmd :: args) in\n  { pid = 0; command = cmd; args = args_a; in_file = in_f; out_file = out_f }\n\nlet job_i_to_job (j : job_i) : job =\n  { procs   = List.map proc_i_to_proc (fst j);\n    status  = Running;\n    mode    = (snd j);\n    pgid    = 0;\n    command = \"\";\n    nalive  = List.length (fst j); }\n\n\n(*** print functions ***)\nlet string_of_proc (p : proc) =\n  let arg_str = Array.fold_left (fun acc s -> acc ^ \" \" ^ s) \"args: \" p.args in\n  let in_file_str = match p.in_file with\n    | Some f -> \"input: \" ^ f ^ \"  \"\n    | None -> \"\"\n  in\n  let out_file_str = match p.out_file with\n    | Some (f, _) -> \"output: \" ^ f ^ \"  \"\n    | None -> \"\"\n  in\n  \"command: \" ^ p.command ^ \"\\n\" ^ arg_str ^ \"\\n\" ^ in_file_str ^ out_file_str\n\nlet rec string_of_job (j : job) =\n  String.concat \"\" (List.map string_of_proc j.procs)\n\nlet string_of_proc_i (p : proc_i) =\n  let ((cmd, args), (in_file, out_file)) = p in\n  let arg_str = String.concat \"\" args in\n  let in_file_str = match in_file with\n    | Some f -> \"input: \" ^ f ^ \"\\n\"\n    | None -> \"\"\n  in\n  let out_file_str = match out_file with\n    | Some (f, _) -> \"output: \" ^ f ^ \"\\n\"\n    | None -> \"\"\n  in\n  \"command: \" ^ cmd ^ \"\\n\" ^ arg_str ^ \"\\n\" ^ in_file_str ^ out_file_str\n\nlet rec string_of_job_i (j : job_i) =\n  String.concat \"\" (List.map string_of_proc_i (fst j))\n\nlet print_proc (p : proc) = print_string (string_of_proc p)\nlet print_proc_i (p : proc_i) = print_string (string_of_proc_i p)\nlet print_job (j : job) = print_string (string_of_job j)\nlet print_job_i (j : job_i) = print_string (string_of_job_i j)\n\n"}}}
Found a `.merlin` file at /Users/mandalarian/Downloads/cash
]] Making a new jbuilder package at /Users/mandalarian/Downloads/cash
=== Project root: /Users/mandalarian/Downloads/cash
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /Users/mandalarian/Downloads/cash/jbuild"}}
Read message 
{"jsonrpc":"2.0","id":8,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/mandalarian/Downloads/cash/syntax.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Found a `.merlin` file at /Users/mandalarian/Downloads/cash
]] Making a new jbuilder package at /Users/mandalarian/Downloads/cash
=== Project root: /Users/mandalarian/Downloads/cash
Detected `opam` dependency manager for local use
Sending response {"id": 8, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/mandalarian/Downloads/cash/jbuild"}}
Read message 
{"jsonrpc":"2.0","id":9,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/mandalarian/Downloads/cash/syntax.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.014066696167ms
Found a `.merlin` file at /Users/mandalarian/Downloads/cash
]] Making a new jbuilder package at /Users/mandalarian/Downloads/cash
=== Project root: /Users/mandalarian/Downloads/cash
Detected `opam` dependency manager for local use
Sending response {"id": 9, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/mandalarian/Downloads/cash/jbuild"}}
Read message 
{"jsonrpc":"2.0","id":10,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/mandalarian/Downloads/cash/syntax.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00786781311035ms
Found a `.merlin` file at /Users/mandalarian/Downloads/cash
]] Making a new jbuilder package at /Users/mandalarian/Downloads/cash
=== Project root: /Users/mandalarian/Downloads/cash
Detected `opam` dependency manager for local use
Sending response {"id": 10, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to read /Users/mandalarian/Downloads/cash/jbuild", "command": ""}}]}
Found a `.merlin` file at /Users/mandalarian/Downloads/cash
]] Making a new jbuilder package at /Users/mandalarian/Downloads/cash
=== Project root: /Users/mandalarian/Downloads/cash
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/mandalarian/Downloads/cash/syntax.ml"}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/mandalarian/Downloads/cash/main.ml","languageId":"ocaml","version":1,"text":"open Syntax\nopen Utils\nopen Unix\nopen ExtUnixSpecific\n\nexception MainError of string\nexception NotReached\nexception Invalid_argument\nexception InvalidCommand\n\nlet histfilename = \".cash_history\"\nlet prompt = \"$ \"\nlet env = ref [||]\n\n\nlet to_background (j : job) (jbs : job list) =\n  tcsetpgrp stdin (getpgid 0);\n  print_job_status j ((List.length jbs) + 1);\n  flush Pervasives.stdout;\n  jbs @ [j]\n\n\nlet wait_foreground_job (j : job) (jbs : job list) =\n  let status = List.hd (List.map (fun p -> waitpid [WUNTRACED] p.pid) j.procs) in\n  tcsetpgrp stdin (getpid ());\n  match status with\n  | (_, WSTOPPED n) ->\n    j.status <- Stopped;\n    to_background j jbs\n  | _ -> []\n\n\nlet wait_background_job (jbs : job list) =\n  let rec handle_terminated_proc (pid : int) (jbs : job list) =\n    let has_pid j = List.exists (fun p -> p.pid = pid) j.procs in\n    let j = List.find has_pid jbs in\n    j.nalive <- j.nalive - 1;\n    match (j.nalive > 0) with\n    | false -> remove j jbs\n    | true -> jbs\n  in\n  (try\n     let (pid, status) = waitpid [WNOHANG; WUNTRACED] (-1) in\n     match pid with\n     | 0 -> jbs\n     | _ -> handle_terminated_proc pid jbs\n   with\n   | Not_found -> jbs\n   | Unix_error (ECHILD, _, _) -> jbs)\n\n\nlet exec_history () =\n  let channel = open_in histfilename in\n  let rec _read_hist_print (n : int) =\n    (try\n       let str = input_line channel in\n       Printf.printf \"%s : %s\\n\" (string_of_int n) str;\n       _read_hist_print (n + 1)\n     with\n     | End_of_file -> ())\n  in _read_hist_print 0; flush Pervasives.stdout;\n  sys_exit 0\n\n\nlet exec_cd (arg : string array) =\n  (match Array.length arg with\n   | 1 -> chdir (getenv \"HOME\")\n   | _ -> (try chdir arg.(1) with\n       | Unix_error (eno, _, x) -> raise (MainError (errmsg eno \"cd\" x))));\n  sys_exit 0\n\n\nlet exec_fg (args : string array) (jbs : job list) =\n  (try\n     let index = match Array.length args with\n       | 1 -> 1\n       | _ -> int_of_string args.(1)\n     in\n     let j = List.nth jbs (index - 1) in\n     let newjbs = remove j jbs in\n     (match j.status with\n      | Stopped ->\n        j.status <- Running;\n        List.iter (fun p -> kill p.pid Sys.sigcont) j.procs\n      | _ -> ());\n     j.mode <- Foreground;\n     tcsetpgrp stdin j.pgid;\n     print_job_status j index; flush Pervasives.stdout;\n     wait_foreground_job j newjbs\n   with\n   | Failure _ -> raise (MainError \"No such job\")\n   | Invalid_argument -> raise (MainError \"No such job\"))\n\n\nlet exec_bg (args : string array) (jbs : job list) =\n  (try\n     let index = match Array.length args with\n       | 1 -> 1\n       | _ -> int_of_string args.(1)\n     in\n     let j = List.nth jbs (index - 1) in\n     (match j.status with\n      | Stopped ->\n        j.status <- Running;\n        List.iter (fun p -> kill p.pid Sys.sigcont) j.procs\n      | _ -> ());\n     print_job_status j index; flush Pervasives.stdout;\n     jbs\n   with\n   | Failure _ -> raise (MainError \"No such job\")\n   | Invalid_argument -> raise (MainError \"No such job\"))\n\n\nlet exec_jobs (jbs : job list) =\n  let id = ref 0 in\n  let _print j = id := !id + 1; print_job_status j !id;\n  in\n  List.iter _print jbs;\n  flush Pervasives.stdout;\n  sys_exit 0\n\n\nlet run_job (j : job) (jbs : job list) =\n  let nproc = List.length j.procs in\n  let pipes = List.map (fun _ -> pipe ()) (List.tl j.procs) in\n  let _close_pipe_all (p : pipe list) =\n    List.iter (fun (pin, pout) -> close pin; close pout) p\n  in\n  let rec _run_job (pl : proc list) (n : int) (cpid : int list) (pgid : int) =\n    match pl with\n    | [] ->\n      j.pgid <- pgid;\n      sleepf 0.001; (* for setpgid to be effective *)\n      _close_pipe_all pipes;\n      (match j.mode with\n       | Foreground ->\n         (match pgid with\n          | 0 -> jbs\n          | _ -> tcsetpgrp stdin pgid; wait_foreground_job j jbs)\n       | Background ->\n         to_background j jbs)\n    | p :: px ->\n      (match fork () with\n       | 0 ->\n         setup_pipes pipes n nproc;\n         setup_redirect p;\n         set_signals Sys.Signal_default;\n         setpgid 0 pgid;\n         (try\n            match p.command with\n            | \"history\" -> exec_history ()\n            | \"cd\"      -> exec_cd p.args\n            | \"jobs\"    -> exec_jobs jbs\n            | _         -> execvpe p.command p.args !env\n          with\n          | Unix_error (ENOENT, \"execvpe\", cmd) ->\n            prerr_string (\"command not found: \" ^ cmd ^ \"\\n\");\n            flush Pervasives.stderr;\n            kill 0 Sys.sigkill;\n            raise InvalidCommand)\n       | pid ->\n         p.pid <- pid;\n         match pgid with\n         | 0 -> _run_job px (n + 1) (pid :: cpid) pid\n         | _ -> _run_job px (n + 1) (pid :: cpid) pgid)\n  in\n  (try _run_job j.procs 0 [] 0 with\n   | Unix_error (eno, syscall, cmd) -> raise (MainError (errmsg eno syscall cmd)))\n\n\nlet rec read_exec (ojbs : job list) =\n  let jbs = wait_background_job ojbs in\n  match LNoise.linenoise prompt with\n  | None -> () (* terminating the shell *)\n  | Some \"\" -> read_exec jbs\n  | Some input ->\n    (LNoise.history_add input |> ignore;\n     LNoise.history_save histfilename |> ignore;\n     (try\n        let job_i = Parser.toplevel Lexer.main (Lexing.from_string input) in\n        let job = Syntax.job_i_to_job job_i in\n        job.command <- input;\n        match job.procs with\n        | [] -> raise NotReached\n        | p :: px -> (match p.command with\n            | \"exit\" -> ()\n            | \"fg\"   -> let newjbs = exec_fg p.args jbs in read_exec newjbs\n            | \"bg\"   -> let newjbs = exec_bg p.args jbs in read_exec newjbs\n            | _      -> let newjbs = run_job job jbs in read_exec newjbs)\n      with\n      | Parsing.Parse_error ->\n        prerr_string \"Invalid input.\\n\"; flush Pervasives.stderr; read_exec jbs\n      | MainError msg ->\n        prerr_string (msg ^ \"\\n\"); flush Pervasives.stderr; read_exec jbs\n      | InvalidCommand -> read_exec jbs\n      | End_of_file -> ()))\n\n\nlet rec read_print () =\n  print_string \"$ \";\n  flush Pervasives.stdout;\n  let input = read_line () in\n  let job_i = Parser.toplevel Lexer.main (Lexing.from_string input) in\n  let job = Syntax.job_i_to_job job_i in\n  (print_job job;\n   read_print ())\n\n\nlet _ =\n  openfile histfilename [O_RDWR; O_APPEND; O_CREAT] 0o600 |> ignore;\n  LNoise.set_multiline true;\n  LNoise.history_load ~filename:histfilename |> ignore;\n  LNoise.history_set ~max_length:100 |> ignore;\n  set_signals Sys.Signal_ignore;\n  env := environment (); read_exec []\n\n(*\nlet _ =\n  read_print ()\n*)\n\n"}}}
Found a `.merlin` file at /Users/mandalarian/Downloads/cash
]] Making a new jbuilder package at /Users/mandalarian/Downloads/cash
=== Project root: /Users/mandalarian/Downloads/cash
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /Users/mandalarian/Downloads/cash/jbuild"}}
Read message 
{"jsonrpc":"2.0","id":11,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/mandalarian/Downloads/cash/main.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0209808349609ms
Found a `.merlin` file at /Users/mandalarian/Downloads/cash
]] Making a new jbuilder package at /Users/mandalarian/Downloads/cash
=== Project root: /Users/mandalarian/Downloads/cash
Detected `opam` dependency manager for local use
Sending response {"id": 11, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/mandalarian/Downloads/cash/jbuild"}}
Read message 
{"jsonrpc":"2.0","id":12,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/mandalarian/Downloads/cash/main.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /Users/mandalarian/Downloads/cash
]] Making a new jbuilder package at /Users/mandalarian/Downloads/cash
=== Project root: /Users/mandalarian/Downloads/cash
Detected `opam` dependency manager for local use
Sending response {"id": 12, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/mandalarian/Downloads/cash/jbuild"}}
Read message 
{"jsonrpc":"2.0","id":13,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/mandalarian/Downloads/cash/main.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Found a `.merlin` file at /Users/mandalarian/Downloads/cash
]] Making a new jbuilder package at /Users/mandalarian/Downloads/cash
=== Project root: /Users/mandalarian/Downloads/cash
Detected `opam` dependency manager for local use
Sending response {"id": 13, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to read /Users/mandalarian/Downloads/cash/jbuild", "command": ""}}]}
Found a `.merlin` file at /Users/mandalarian/Downloads/cash
]] Making a new jbuilder package at /Users/mandalarian/Downloads/cash
=== Project root: /Users/mandalarian/Downloads/cash
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":14,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/mandalarian/Downloads/cash/main.ml"},"position":{"line":26,"character":1}}}
[server] Got a method textDocument/hover
[server] processing took 0.0441074371338ms
Found a `.merlin` file at /Users/mandalarian/Downloads/cash
]] Making a new jbuilder package at /Users/mandalarian/Downloads/cash
=== Project root: /Users/mandalarian/Downloads/cash
Detected `opam` dependency manager for local use
Sending response {"id": 14, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/mandalarian/Downloads/cash/jbuild"}}
Read message 
{"jsonrpc":"2.0","id":15,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/mandalarian/Downloads/cash/main.ml"},"range":{"start":{"line":29,"character":11},"end":{"line":29,"character":11}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0569820404053ms
Found a `.merlin` file at /Users/mandalarian/Downloads/cash
]] Making a new jbuilder package at /Users/mandalarian/Downloads/cash
=== Project root: /Users/mandalarian/Downloads/cash
Detected `opam` dependency manager for local use
Sending response {"id": 15, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/mandalarian/Downloads/cash/jbuild"}}
Read message 
{"jsonrpc":"2.0","id":16,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/mandalarian/Downloads/cash/main.ml"},"position":{"line":27,"character":4}}}
[server] Got a method textDocument/hover
[server] processing took 0.0171661376953ms
Found a `.merlin` file at /Users/mandalarian/Downloads/cash
]] Making a new jbuilder package at /Users/mandalarian/Downloads/cash
=== Project root: /Users/mandalarian/Downloads/cash
Detected `opam` dependency manager for local use
Sending response {"id": 16, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/mandalarian/Downloads/cash/jbuild"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/mandalarian/Downloads/cash/main.ml"}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/mandalarian/Downloads/cash/main.ml","languageId":"ocaml","version":1,"text":"open Syntax\nopen Utils\nopen Unix\nopen ExtUnixSpecific\n\nexception MainError of string\nexception NotReached\nexception Invalid_argument\nexception InvalidCommand\n\nlet histfilename = \".cash_history\"\nlet prompt = \"$ \"\nlet env = ref [||]\n\n\nlet to_background (j : job) (jbs : job list) =\n  tcsetpgrp stdin (getpgid 0);\n  print_job_status j ((List.length jbs) + 1);\n  flush Pervasives.stdout;\n  jbs @ [j]\n\n\nlet wait_foreground_job (j : job) (jbs : job list) =\n  let status = List.hd (List.map (fun p -> waitpid [WUNTRACED] p.pid) j.procs) in\n  tcsetpgrp stdin (getpid ());\n  match status with\n  | (_, WSTOPPED n) ->\n    j.status <- Stopped;\n    to_background j jbs\n  | _ -> []\n\n\nlet wait_background_job (jbs : job list) =\n  let rec handle_terminated_proc (pid : int) (jbs : job list) =\n    let has_pid j = List.exists (fun p -> p.pid = pid) j.procs in\n    let j = List.find has_pid jbs in\n    j.nalive <- j.nalive - 1;\n    match (j.nalive > 0) with\n    | false -> remove j jbs\n    | true -> jbs\n  in\n  (try\n     let (pid, status) = waitpid [WNOHANG; WUNTRACED] (-1) in\n     match pid with\n     | 0 -> jbs\n     | _ -> handle_terminated_proc pid jbs\n   with\n   | Not_found -> jbs\n   | Unix_error (ECHILD, _, _) -> jbs)\n\n\nlet exec_history () =\n  let channel = open_in histfilename in\n  let rec _read_hist_print (n : int) =\n    (try\n       let str = input_line channel in\n       Printf.printf \"%s : %s\\n\" (string_of_int n) str;\n       _read_hist_print (n + 1)\n     with\n     | End_of_file -> ())\n  in _read_hist_print 0; flush Pervasives.stdout;\n  sys_exit 0\n\n\nlet exec_cd (arg : string array) =\n  (match Array.length arg with\n   | 1 -> chdir (getenv \"HOME\")\n   | _ -> (try chdir arg.(1) with\n       | Unix_error (eno, _, x) -> raise (MainError (errmsg eno \"cd\" x))));\n  sys_exit 0\n\n\nlet exec_fg (args : string array) (jbs : job list) =\n  (try\n     let index = match Array.length args with\n       | 1 -> 1\n       | _ -> int_of_string args.(1)\n     in\n     let j = List.nth jbs (index - 1) in\n     let newjbs = remove j jbs in\n     (match j.status with\n      | Stopped ->\n        j.status <- Running;\n        List.iter (fun p -> kill p.pid Sys.sigcont) j.procs\n      | _ -> ());\n     j.mode <- Foreground;\n     tcsetpgrp stdin j.pgid;\n     print_job_status j index; flush Pervasives.stdout;\n     wait_foreground_job j newjbs\n   with\n   | Failure _ -> raise (MainError \"No such job\")\n   | Invalid_argument -> raise (MainError \"No such job\"))\n\n\nlet exec_bg (args : string array) (jbs : job list) =\n  (try\n     let index = match Array.length args with\n       | 1 -> 1\n       | _ -> int_of_string args.(1)\n     in\n     let j = List.nth jbs (index - 1) in\n     (match j.status with\n      | Stopped ->\n        j.status <- Running;\n        List.iter (fun p -> kill p.pid Sys.sigcont) j.procs\n      | _ -> ());\n     print_job_status j index; flush Pervasives.stdout;\n     jbs\n   with\n   | Failure _ -> raise (MainError \"No such job\")\n   | Invalid_argument -> raise (MainError \"No such job\"))\n\n\nlet exec_jobs (jbs : job list) =\n  let id = ref 0 in\n  let _print j = id := !id + 1; print_job_status j !id;\n  in\n  List.iter _print jbs;\n  flush Pervasives.stdout;\n  sys_exit 0\n\n\nlet run_job (j : job) (jbs : job list) =\n  let nproc = List.length j.procs in\n  let pipes = List.map (fun _ -> pipe ()) (List.tl j.procs) in\n  let _close_pipe_all (p : pipe list) =\n    List.iter (fun (pin, pout) -> close pin; close pout) p\n  in\n  let rec _run_job (pl : proc list) (n : int) (cpid : int list) (pgid : int) =\n    match pl with\n    | [] ->\n      j.pgid <- pgid;\n      sleepf 0.001; (* for setpgid to be effective *)\n      _close_pipe_all pipes;\n      (match j.mode with\n       | Foreground ->\n         (match pgid with\n          | 0 -> jbs\n          | _ -> tcsetpgrp stdin pgid; wait_foreground_job j jbs)\n       | Background ->\n         to_background j jbs)\n    | p :: px ->\n      (match fork () with\n       | 0 ->\n         setup_pipes pipes n nproc;\n         setup_redirect p;\n         set_signals Sys.Signal_default;\n         setpgid 0 pgid;\n         (try\n            match p.command with\n            | \"history\" -> exec_history ()\n            | \"cd\"      -> exec_cd p.args\n            | \"jobs\"    -> exec_jobs jbs\n            | _         -> execvpe p.command p.args !env\n          with\n          | Unix_error (ENOENT, \"execvpe\", cmd) ->\n            prerr_string (\"command not found: \" ^ cmd ^ \"\\n\");\n            flush Pervasives.stderr;\n            kill 0 Sys.sigkill;\n            raise InvalidCommand)\n       | pid ->\n         p.pid <- pid;\n         match pgid with\n         | 0 -> _run_job px (n + 1) (pid :: cpid) pid\n         | _ -> _run_job px (n + 1) (pid :: cpid) pgid)\n  in\n  (try _run_job j.procs 0 [] 0 with\n   | Unix_error (eno, syscall, cmd) -> raise (MainError (errmsg eno syscall cmd)))\n\n\nlet rec read_exec (ojbs : job list) =\n  let jbs = wait_background_job ojbs in\n  match LNoise.linenoise prompt with\n  | None -> () (* terminating the shell *)\n  | Some \"\" -> read_exec jbs\n  | Some input ->\n    (LNoise.history_add input |> ignore;\n     LNoise.history_save histfilename |> ignore;\n     (try\n        let job_i = Parser.toplevel Lexer.main (Lexing.from_string input) in\n        let job = Syntax.job_i_to_job job_i in\n        job.command <- input;\n        match job.procs with\n        | [] -> raise NotReached\n        | p :: px -> (match p.command with\n            | \"exit\" -> ()\n            | \"fg\"   -> let newjbs = exec_fg p.args jbs in read_exec newjbs\n            | \"bg\"   -> let newjbs = exec_bg p.args jbs in read_exec newjbs\n            | _      -> let newjbs = run_job job jbs in read_exec newjbs)\n      with\n      | Parsing.Parse_error ->\n        prerr_string \"Invalid input.\\n\"; flush Pervasives.stderr; read_exec jbs\n      | MainError msg ->\n        prerr_string (msg ^ \"\\n\"); flush Pervasives.stderr; read_exec jbs\n      | InvalidCommand -> read_exec jbs\n      | End_of_file -> ()))\n\n\nlet rec read_print () =\n  print_string \"$ \";\n  flush Pervasives.stdout;\n  let input = read_line () in\n  let job_i = Parser.toplevel Lexer.main (Lexing.from_string input) in\n  let job = Syntax.job_i_to_job job_i in\n  (print_job job;\n   read_print ())\n\n\nlet _ =\n  openfile histfilename [O_RDWR; O_APPEND; O_CREAT] 0o600 |> ignore;\n  LNoise.set_multiline true;\n  LNoise.history_load ~filename:histfilename |> ignore;\n  LNoise.history_set ~max_length:100 |> ignore;\n  set_signals Sys.Signal_ignore;\n  env := environment (); read_exec []\n\n(*\nlet _ =\n  read_print ()\n*)\n\n"}}}
Found a `.merlin` file at /Users/mandalarian/Downloads/cash
]] Making a new jbuilder package at /Users/mandalarian/Downloads/cash
=== Project root: /Users/mandalarian/Downloads/cash
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /Users/mandalarian/Downloads/cash/jbuild"}}
Read message 
{"jsonrpc":"2.0","id":17,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/mandalarian/Downloads/cash/main.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Found a `.merlin` file at /Users/mandalarian/Downloads/cash
]] Making a new jbuilder package at /Users/mandalarian/Downloads/cash
=== Project root: /Users/mandalarian/Downloads/cash
Detected `opam` dependency manager for local use
Sending response {"id": 17, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/mandalarian/Downloads/cash/jbuild"}}
Read message 
{"jsonrpc":"2.0","id":18,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/mandalarian/Downloads/cash/main.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0178813934326ms
Found a `.merlin` file at /Users/mandalarian/Downloads/cash
]] Making a new jbuilder package at /Users/mandalarian/Downloads/cash
=== Project root: /Users/mandalarian/Downloads/cash
Detected `opam` dependency manager for local use
Sending response {"id": 18, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/mandalarian/Downloads/cash/jbuild"}}
Read message 
{"jsonrpc":"2.0","id":19,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/mandalarian/Downloads/cash/main.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Found a `.merlin` file at /Users/mandalarian/Downloads/cash
]] Making a new jbuilder package at /Users/mandalarian/Downloads/cash
=== Project root: /Users/mandalarian/Downloads/cash
Detected `opam` dependency manager for local use
Sending response {"id": 19, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to read /Users/mandalarian/Downloads/cash/jbuild", "command": ""}}]}
Found a `.merlin` file at /Users/mandalarian/Downloads/cash
]] Making a new jbuilder package at /Users/mandalarian/Downloads/cash
=== Project root: /Users/mandalarian/Downloads/cash
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":20,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/mandalarian/Downloads/cash/main.ml"},"range":{"start":{"line":29,"character":11},"end":{"line":29,"character":11}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0250339508057ms
Found a `.merlin` file at /Users/mandalarian/Downloads/cash
]] Making a new jbuilder package at /Users/mandalarian/Downloads/cash
=== Project root: /Users/mandalarian/Downloads/cash
Detected `opam` dependency manager for local use
Sending response {"id": 20, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/mandalarian/Downloads/cash/jbuild"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/mandalarian/Downloads/cash/main.ml"}}}
